rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read for all authenticated users (anonymous or Google)
    match /{document=**} {
      allow read: if request.auth != null;
    }

    // Map features (markers, shapes, etc.)
    match /mapFeatures/{featureId} {
      allow write: if request.auth != null && (
        (resource.data.owner == request.auth.uid) ||
        (!exists(/databases/$(database)/documents/mapFeatures/$(featureId)) && request.resource.data.owner == request.auth.uid) ||
        (exists(/databases/$(database)/documents/maps/$(request.resource.data.mapId)) && get(/databases/$(database)/documents/maps/$(request.resource.data.mapId)).data.shared == true)
      );
      allow update, create: if request.resource.data.type in ['marker', 'shape'] &&
        request.resource.data.timestamp is int &&
        (!('description' in request.resource.data) || request.resource.data.description.size() <= 500) &&
        (!('category' in request.resource.data) || request.resource.data.category in ['restaurant','hotel','park','shopping','landmark','other']);
    }

    // User profiles
    match /users/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
      allow update, create: if request.resource.data.keys().hasAll(['name']) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() <= 50;
    }

    // Maps (for shared/collaborative maps)
    match /maps/{mapId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        (resource.data.owner == request.auth.uid) ||
        (!exists(/databases/$(database)/documents/maps/$(mapId)) && request.resource.data.owner == request.auth.uid)
      );
      allow update, create: if request.resource.data.keys().hasAll(['owner', 'shared']) &&
        request.resource.data.owner is string &&
        (request.resource.data.shared == true || request.resource.data.shared == false);
    }
  }
}
